// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TipoProduto {
  ANIMAL
  LIVRO
  ROUPA
  LUGAR
  ELETRONICO
}

enum StatusDoacao {
  PENDENTE
  EXCLUIDO 
  FEITA
}

enum TipoUsuario {
  ADMIN
  DOADOR
  DONATARIO 
}

// Modelo de Usuário
model Usuario {
  id                     String                @id @default(uuid())
  nome                   String
  email                  String                @unique
  senha                  String
  tipo                   TipoUsuario           @default(DONATARIO)
  criadoEm               DateTime              @default(now())
  telefone               String?
  ativo                  Boolean               @default(true)
  fotoUrl                String?

  campanhasCriadas       Campanha[]            @relation("CampanhasCriadas")
  doacoes                Doacao[]

  historicoDeAlteracoes  LogAlteracaoDoacao[]  @relation("UsuarioHistorico")
  feedbacks           Feedback[]

  @@index([criadoEm]) // Índice para consultas por data de criação
}

// Modelo de Campanha
model Campanha {
  id           String      @id @default(uuid())
  titulo       String
  descricao    String
  meta         Float
  criadaEm     DateTime    @default(now())

  criadorId    String
  criador      Usuario     @relation("CampanhasCriadas", fields: [criadorId], references: [id])
  doacoes      Doacao[]
  feedbacks           Feedback[]
}

// Modelo de Doação
model Doacao {
  id                  String                @id @default(uuid())
  valor               Float
  data                DateTime              @default(now())
  tipoProduto         TipoProduto
  produto             String
  status              StatusDoacao          @default(PENDENTE)

  usuarioId           String
  usuario             Usuario               @relation(fields: [usuarioId], references: [id])
  
  campanhaId          String
  campanha            Campanha              @relation(fields: [campanhaId], references: [id])

  categoriaId         String
  categoria           Categoria             @relation(fields: [categoriaId], references: [id])

  localId             String
  local               Local                 @relation(fields: [localId], references: [id])

 
 
  logsAlteracoes      LogAlteracaoDoacao[]
  feedbacks           Feedback[]

  @@index([status]) // Índice para consultas por status
  @@index([data])   // Índice para consultas por data

}

// Modelo de Categoria
model Categoria {
  id            String    @id @default(uuid())
  nome          String    @unique
  descricao     String?   // Explicação da categoria
  iconeUrl      String?   // URL para exibir um ícone no front
  ativo         Boolean   @default(true) // Controle de visibilidade
  criadaEm      DateTime  @default(now())
  atualizadaEm  DateTime  @updatedAt

  doacoes       Doacao[]

  @@index([nome]) // Índice para consultas por nome
}

// Modelo de Local
model Local {
  id        String    @id @default(uuid())
  cidade    String
  estado    String
  pais      String
  doacoes   Doacao[]
}



// Modelo de Log de Alterações em Doações
model LogAlteracaoDoacao {
  id          String    @id @default(uuid())
  doacaoId    String
  doacao      Doacao    @relation(fields: [doacaoId], references: [id])

  alteradoPor String
  usuario     Usuario   @relation("UsuarioHistorico", fields: [alteradoPor], references: [id])

  campo       String    // Nome do campo alterado
  valorAntigo String    // Valor anterior do campo
  valorNovo   String    // Novo valor do campo
  data        DateTime  @default(now())
}

model Feedback {
  id          String     @id @default(uuid())
  mensagem    String
  nota        Int        @default(5)
  criadoEm    DateTime   @default(now())

  usuarioId   String
  usuario     Usuario    @relation(fields: [usuarioId], references: [id])

  doacaoId    String?
  doacao      Doacao?    @relation(fields: [doacaoId], references: [id])

  campanhaId  String?
  campanha    Campanha?  @relation(fields: [campanhaId], references: [id])
}